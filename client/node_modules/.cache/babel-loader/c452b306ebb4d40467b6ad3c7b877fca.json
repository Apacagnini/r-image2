{"ast":null,"code":"function getCategoriesList() {\n  return ['landscape', 'city', 'sky', 'nature', 'forest', 'sea', 'beach', 'mountain'];\n}\n\n/* VARIABLES GLOBALES */\n\nlet categories_list = ['landscape', 'city', 'sky', 'nature', 'forest', 'sea', 'beach', 'mountain'];\nlet active_category = 'landscape';\nlet default_num_img = 12;\nlet pexels_per_page = 50;\n\n/* FUNCIONES */\n/*\nconst border_bottom_nav = () => {\n    if ( !document.getElementById(\"headerNav\") ) return;\n    if (window.scrollY > 0){\n        document.getElementById(\"headerNav\").classList.add('border-bottom-active');\n    }else{\n        document.getElementById(\"headerNav\").classList.remove('border-bottom-active');\n    }\n} \n\nconst infiniteScroll = () => {\n    if (window.scrollY + window.innerHeight >= document.documentElement.scrollHeight) add_to_img_container(active_category, default_num_img, false);\n}\n\nconst fill_navbarCategorias = () => {\n    const $navbarCategorias = document.getElementById(\"navbarCategorias\");\n    if (!$navbarCategorias) return;\n    let ul = document.createElement(\"ul\");\n    ul.className = 'navbar-nav';\n\n    categories_list.forEach( category => {\n        let button = document.createElement(\"button\");\n        button.id = category;\n        button.className = 'btn text-secondary bg-transparent text-hover-color';\n        button.type = 'button';\n        button.onclick = () => add_to_img_container(category,6);\n        button.innerHTML = `${category.charAt(0).toUpperCase() + category.slice(1)}`;\n\n        let li = document.createElement(\"li\");\n        li.className = 'nav-item text-center';\n        li.appendChild(button);\n        ul.appendChild(li);\n    });\n    \n    $navbarCategorias.appendChild(ul);\n}\n\nconst getJson = async (category, url) => {\n    try {\n        url = (url == '') ? `https://api.pexels.com/v1/search?query=${category}&per_page=${pexels_per_page}` : url;\n        let res = await fetch(url, { headers: { Authorization: '563492ad6f91700001000001c6df12244f84428fa8467b09ec5d6ff9' } });\n        let json = await res.json();\n        //console.log(res, json);\n\n        if (!res.ok) throw { status: res.status, statusText: res.statusText };\n\n        return json;\n\n    } catch (err) {\n        let message = err.statusText || \"Ocurrió un error\";\n        console.log(`Error ${err.status}: ${message}`);\n        return {};\n    }\n}\n\nconst getPhotos = async (category, cantidad) => {\n    if (data.categories[category].availableIds.length < cantidad) await data.push(category, await getJson(category, data.getNextPage(category)));\n    return data.getRandom(category, cantidad);\n}\n\n\nconst add_to_img_container = async  (category, num_img, colorizeButton = true) => {\n\n    const $img_container = document.getElementById(\"img_container\");\n    if (!$img_container) return;\n\n    if (colorizeButton) document.getElementById(active_category).classList.remove('button-active');\n    active_category = category;\n\n    let imgMapRandom = await getPhotos(category, num_img);\n\n    if (imgMapRandom.length == 0) return;\n\n    if (colorizeButton) document.getElementById(category).classList.add('button-active');\n\n    const img = document.createElement(\"img\");\n    img.className = 'img-fluid';\n    img.alt = 'random image';\n\n    const a = document.createElement('a');\n    a.target = \"_blank\";\n    a.appendChild(img);\n\n    const div = document.createElement(\"div\");\n    div.className = 'box';\n    div.appendChild(a);\n    \n    const $fragment = document.createDocumentFragment();\n\n    imgMapRandom.forEach( index => {\n        new_div = div.cloneNode(true);\n        new_div.querySelector('img').src = data.getSrc(index,'medium');\n        new_div.querySelector('a').href = data.getSrc(index,'original');\n        $fragment.appendChild(new_div);\n    });\n\n    $img_container.appendChild($fragment);\n}\n*/\n/* CLASES */\n/*\nclass dataClass {\n    constructor(categories_list) {\n        this.categories = {}\n        categories_list.forEach( category => this.categories[category] = {page: 0, next_page:'', availableIds:[]} );\n        this.usedIds = [];\n        this.photos = {};\n    }\n    isIndUsedIds(id){\n        return this.usedIds.includes(id);\n    }\n    isInCategories(id){\n        return Object.values(this.categories).some( (category)=>( category.availableIds.includes(id) ) );\n    }\n    push(category,json) {\n        this.categories[category].next_page = json.next_page;\n        this.categories[category].page = json.page;\n        json.photos.forEach( photo => {\n            if(this.isIndUsedIds(photo.id) === false && this.isInCategories(photo.id) === false) {\n                this.categories[category].availableIds.push(photo.id);\n                this.photos[photo.id] = photo;\n            }\n        })\n    }\n    getRandom(category, cantidad) {\n        const disponibles = () => this.categories[category].availableIds.length;\n        let random = [];\n        let ciclos = cantidad < disponibles() ? cantidad : disponibles();\n        while (random.length < ciclos) {\n            let index = Math.floor(Math.random() * ( disponibles() - 1 ) );\n            if (!random.includes(this.categories[category].availableIds[index])){\n                let id = this.categories[category].availableIds.splice(index,1).pop();\n                random.push(id);\n                this.usedIds.push(id);\n            }\n        }\n        this.usedIds.push()\n        return random;\n    }\n    getSrc(id,type){\n        return this.photos[id].src[type];\n    }\n    getNextPage(category){\n        return this.categories[category].next_page;\n    }\n    remove(ids){\n        ids.forEach(id => delete this.photos[id]);\n    }\n}\n*/\n/* EVENTOS */\n/*\nwindow.onscroll = () => {\n    border_bottom_nav();\n    infiniteScroll();\n}\n*/\n/* PRINCIPAL */\n/*\ndata = new dataClass(categories_list);\n\nfill_navbarCategorias();\nadd_to_img_container(active_category, default_num_img, false);\n*/\n\nexport default getCategoriesList;","map":{"version":3,"names":["getCategoriesList","categories_list","active_category","default_num_img","pexels_per_page"],"sources":["/hdd1/Alejandro_02/cursos/UTNBA-FullStackDev/proyecto-final-front/linea_03/r-image/src/main.js"],"sourcesContent":["function getCategoriesList(){\n    return ['landscape', 'city', 'sky', 'nature', 'forest', 'sea','beach','mountain'];\n}\n\n/* VARIABLES GLOBALES */\n\nlet categories_list = ['landscape', 'city', 'sky', 'nature', 'forest', 'sea','beach','mountain'];\nlet active_category = 'landscape';\nlet default_num_img = 12;\nlet pexels_per_page = 50;\n\n/* FUNCIONES */\n/*\nconst border_bottom_nav = () => {\n    if ( !document.getElementById(\"headerNav\") ) return;\n    if (window.scrollY > 0){\n        document.getElementById(\"headerNav\").classList.add('border-bottom-active');\n    }else{\n        document.getElementById(\"headerNav\").classList.remove('border-bottom-active');\n    }\n} \n\nconst infiniteScroll = () => {\n    if (window.scrollY + window.innerHeight >= document.documentElement.scrollHeight) add_to_img_container(active_category, default_num_img, false);\n}\n\nconst fill_navbarCategorias = () => {\n    const $navbarCategorias = document.getElementById(\"navbarCategorias\");\n    if (!$navbarCategorias) return;\n    let ul = document.createElement(\"ul\");\n    ul.className = 'navbar-nav';\n\n    categories_list.forEach( category => {\n        let button = document.createElement(\"button\");\n        button.id = category;\n        button.className = 'btn text-secondary bg-transparent text-hover-color';\n        button.type = 'button';\n        button.onclick = () => add_to_img_container(category,6);\n        button.innerHTML = `${category.charAt(0).toUpperCase() + category.slice(1)}`;\n\n        let li = document.createElement(\"li\");\n        li.className = 'nav-item text-center';\n        li.appendChild(button);\n        ul.appendChild(li);\n    });\n    \n    $navbarCategorias.appendChild(ul);\n}\n\nconst getJson = async (category, url) => {\n    try {\n        url = (url == '') ? `https://api.pexels.com/v1/search?query=${category}&per_page=${pexels_per_page}` : url;\n        let res = await fetch(url, { headers: { Authorization: '563492ad6f91700001000001c6df12244f84428fa8467b09ec5d6ff9' } });\n        let json = await res.json();\n        //console.log(res, json);\n\n        if (!res.ok) throw { status: res.status, statusText: res.statusText };\n\n        return json;\n\n    } catch (err) {\n        let message = err.statusText || \"Ocurrió un error\";\n        console.log(`Error ${err.status}: ${message}`);\n        return {};\n    }\n}\n\nconst getPhotos = async (category, cantidad) => {\n    if (data.categories[category].availableIds.length < cantidad) await data.push(category, await getJson(category, data.getNextPage(category)));\n    return data.getRandom(category, cantidad);\n}\n\n\nconst add_to_img_container = async  (category, num_img, colorizeButton = true) => {\n\n    const $img_container = document.getElementById(\"img_container\");\n    if (!$img_container) return;\n\n    if (colorizeButton) document.getElementById(active_category).classList.remove('button-active');\n    active_category = category;\n\n    let imgMapRandom = await getPhotos(category, num_img);\n\n    if (imgMapRandom.length == 0) return;\n\n    if (colorizeButton) document.getElementById(category).classList.add('button-active');\n\n    const img = document.createElement(\"img\");\n    img.className = 'img-fluid';\n    img.alt = 'random image';\n\n    const a = document.createElement('a');\n    a.target = \"_blank\";\n    a.appendChild(img);\n\n    const div = document.createElement(\"div\");\n    div.className = 'box';\n    div.appendChild(a);\n    \n    const $fragment = document.createDocumentFragment();\n\n    imgMapRandom.forEach( index => {\n        new_div = div.cloneNode(true);\n        new_div.querySelector('img').src = data.getSrc(index,'medium');\n        new_div.querySelector('a').href = data.getSrc(index,'original');\n        $fragment.appendChild(new_div);\n    });\n\n    $img_container.appendChild($fragment);\n}\n*/\n/* CLASES */\n/*\nclass dataClass {\n    constructor(categories_list) {\n        this.categories = {}\n        categories_list.forEach( category => this.categories[category] = {page: 0, next_page:'', availableIds:[]} );\n        this.usedIds = [];\n        this.photos = {};\n    }\n    isIndUsedIds(id){\n        return this.usedIds.includes(id);\n    }\n    isInCategories(id){\n        return Object.values(this.categories).some( (category)=>( category.availableIds.includes(id) ) );\n    }\n    push(category,json) {\n        this.categories[category].next_page = json.next_page;\n        this.categories[category].page = json.page;\n        json.photos.forEach( photo => {\n            if(this.isIndUsedIds(photo.id) === false && this.isInCategories(photo.id) === false) {\n                this.categories[category].availableIds.push(photo.id);\n                this.photos[photo.id] = photo;\n            }\n        })\n    }\n    getRandom(category, cantidad) {\n        const disponibles = () => this.categories[category].availableIds.length;\n        let random = [];\n        let ciclos = cantidad < disponibles() ? cantidad : disponibles();\n        while (random.length < ciclos) {\n            let index = Math.floor(Math.random() * ( disponibles() - 1 ) );\n            if (!random.includes(this.categories[category].availableIds[index])){\n                let id = this.categories[category].availableIds.splice(index,1).pop();\n                random.push(id);\n                this.usedIds.push(id);\n            }\n        }\n        this.usedIds.push()\n        return random;\n    }\n    getSrc(id,type){\n        return this.photos[id].src[type];\n    }\n    getNextPage(category){\n        return this.categories[category].next_page;\n    }\n    remove(ids){\n        ids.forEach(id => delete this.photos[id]);\n    }\n}\n*/\n/* EVENTOS */\n/*\nwindow.onscroll = () => {\n    border_bottom_nav();\n    infiniteScroll();\n}\n*/\n/* PRINCIPAL */\n/*\ndata = new dataClass(categories_list);\n\nfill_navbarCategorias();\nadd_to_img_container(active_category, default_num_img, false);\n*/\n\nexport default getCategoriesList;"],"mappings":"AAAA,SAASA,iBAAiB,GAAE;EACxB,OAAO,CAAC,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC,OAAO,EAAC,UAAU,CAAC;AACrF;;AAEA;;AAEA,IAAIC,eAAe,GAAG,CAAC,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC,OAAO,EAAC,UAAU,CAAC;AAChG,IAAIC,eAAe,GAAG,WAAW;AACjC,IAAIC,eAAe,GAAG,EAAE;AACxB,IAAIC,eAAe,GAAG,EAAE;;AAExeAAeJ,iBAAiB"},"metadata":{},"sourceType":"module"}