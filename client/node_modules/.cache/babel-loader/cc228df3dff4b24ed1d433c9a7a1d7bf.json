{"ast":null,"code":"var _jsxFileName = \"/hdd1/Alejandro_02/cursos/UTNBA-FullStackDev/proyecto-final-front/linea_03/r-image/src/components/Download/Download.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { ReactComponent as DownloadIcon } from '../../assets/circle-down.svg';\nimport { ReactComponent as Spin } from '../../assets/spin.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Download(props) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const renderTooltip = props => /*#__PURE__*/_jsxDEV(Tooltip, {\n    id: \"button-tooltip\",\n    ...props,\n    children: loading ? 'Downloading' : 'Download full image'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n\n  /*\n  const findExtension = (str)=>{\n      str = str.toLowerCase();\n      if(str.includes('.jpg')){\n          return '.jpg';\n      } else if (str.includes('.jpeg')){\n          return '.jpeg';\n      } else if (str.includes('.png')){\n          return '.png';\n      } else if (str.includes('.bmp')){\n          return '.bmp';\n      } else if (str.includes('.raw')){\n          return '.raw';\n      } else if (str.includes('.tiff')){\n          return '.tiff';\n      } else if (str.includes('.gif')){\n          return '.gif';\n      } else {\n          return '';\n      }\n  }\n  */\n\n  const findExtension = str => {\n    const extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.raw', '.tiff', '.gif'];\n    str = str.toLowerCase();\n    for (let i = 0; i < extensions.length; i++) {\n      console.log('i: ' + i + ' ' + extensions[i]);\n      if (str.includes(extensions[i])) {\n        return extensions[i];\n      }\n    }\n    return '';\n  };\n  const onButtonClick = async () => {\n    setLoading(true);\n    console.log(props.href);\n    const response = await fetch(props.href);\n    const blob = await response.blob();\n    let a = document.createElement('a');\n    a.href = window.URL.createObjectURL(blob);\n    a.download = props.title + findExtension(props.href);\n    a.click();\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n    placement: \"right\",\n    delay: {\n      show: 250,\n      hide: 400\n    },\n    overlay: renderTooltip,\n    children: loading ? /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"customButton\",\n      onClick: onButtonClick,\n      children: /*#__PURE__*/_jsxDEV(DownloadIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 92\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(Download, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = Download;\nvar _c;\n$RefreshReg$(_c, \"Download\");","map":{"version":3,"names":["React","useState","OverlayTrigger","Tooltip","ReactComponent","DownloadIcon","Spin","Download","props","loading","setLoading","renderTooltip","findExtension","str","extensions","toLowerCase","i","length","console","log","includes","onButtonClick","href","response","fetch","blob","a","document","createElement","window","URL","createObjectURL","download","title","click","show","hide"],"sources":["/hdd1/Alejandro_02/cursos/UTNBA-FullStackDev/proyecto-final-front/linea_03/r-image/src/components/Download/Download.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { ReactComponent as DownloadIcon } from '../../assets/circle-down.svg'\nimport { ReactComponent as Spin } from '../../assets/spin.svg'\n\nexport default function Download(props) {\n    const [loading, setLoading] = useState(false);\n\n    const renderTooltip = (props) => (\n        <Tooltip id=\"button-tooltip\" {...props}>\n            {loading ? 'Downloading' : 'Download full image'}\n        </Tooltip>\n    );\n\n    /*\n    const findExtension = (str)=>{\n        str = str.toLowerCase();\n        if(str.includes('.jpg')){\n            return '.jpg';\n        } else if (str.includes('.jpeg')){\n            return '.jpeg';\n        } else if (str.includes('.png')){\n            return '.png';\n        } else if (str.includes('.bmp')){\n            return '.bmp';\n        } else if (str.includes('.raw')){\n            return '.raw';\n        } else if (str.includes('.tiff')){\n            return '.tiff';\n        } else if (str.includes('.gif')){\n            return '.gif';\n        } else {\n            return '';\n        }\n    }\n    */\n\n    const findExtension = (str) => {\n        const extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.raw', '.tiff', '.gif']\n        str = str.toLowerCase();\n\n        for (let i = 0; i < extensions.length; i++) {\n            console.log('i: '+i+' '+extensions[i]);\n            if (str.includes(extensions[i])) {\n                return extensions[i];\n            }\n        }\n        return '';\n    }\n\n\n\n    const onButtonClick = async () => {\n        setLoading(true);\n        console.log(props.href);\n        const response = await fetch(props.href);\n        const blob = await response.blob();\n        let a = document.createElement('a');\n        a.href = window.URL.createObjectURL(blob);\n        a.download = props.title + findExtension(props.href);\n        a.click();\n        setLoading(false);\n    }\n\n    return (\n        <OverlayTrigger\n            placement=\"right\"\n            delay={{ show: 250, hide: 400 }}\n            overlay={renderTooltip}\n        >\n            {\n                loading ? <Spin /> :\n                    <button type=\"button\" className='customButton' onClick={onButtonClick}><DownloadIcon /></button>\n            }\n        </OverlayTrigger>\n    );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,SAASC,cAAc,IAAIC,YAAY,QAAQ,8BAA8B;AAC7E,SAASD,cAAc,IAAIE,IAAI,QAAQ,uBAAuB;AAAA;AAE9D,eAAe,SAASC,QAAQ,CAACC,KAAK,EAAE;EAAA;EACpC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,aAAa,GAAIH,KAAK,iBACxB,QAAC,OAAO;IAAC,EAAE,EAAC,gBAAgB;IAAA,GAAKA,KAAK;IAAA,UACjCC,OAAO,GAAG,aAAa,GAAG;EAAqB;IAAA;IAAA;IAAA;EAAA,QAEvD;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAMG,aAAa,GAAIC,GAAG,IAAK;IAC3B,MAAMC,UAAU,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;IAC7ED,GAAG,GAAGA,GAAG,CAACE,WAAW,EAAE;IAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCE,OAAO,CAACC,GAAG,CAAC,KAAK,GAACH,CAAC,GAAC,GAAG,GAACF,UAAU,CAACE,CAAC,CAAC,CAAC;MACtC,IAAIH,GAAG,CAACO,QAAQ,CAACN,UAAU,CAACE,CAAC,CAAC,CAAC,EAAE;QAC7B,OAAOF,UAAU,CAACE,CAAC,CAAC;MACxB;IACJ;IACA,OAAO,EAAE;EACb,CAAC;EAID,MAAMK,aAAa,GAAG,YAAY;IAC9BX,UAAU,CAAC,IAAI,CAAC;IAChBQ,OAAO,CAACC,GAAG,CAACX,KAAK,CAACc,IAAI,CAAC;IACvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAChB,KAAK,CAACc,IAAI,CAAC;IACxC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,EAAE;IAClC,IAAIC,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACnCF,CAAC,CAACJ,IAAI,GAAGO,MAAM,CAACC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IACzCC,CAAC,CAACM,QAAQ,GAAGxB,KAAK,CAACyB,KAAK,GAAGrB,aAAa,CAACJ,KAAK,CAACc,IAAI,CAAC;IACpDI,CAAC,CAACQ,KAAK,EAAE;IACTxB,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACI,QAAC,cAAc;IACX,SAAS,EAAC,OAAO;IACjB,KAAK,EAAE;MAAEyB,IAAI,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAI,CAAE;IAChC,OAAO,EAAEzB,aAAc;IAAA,UAGnBF,OAAO,gBAAG,QAAC,IAAI;MAAA;MAAA;MAAA;IAAA,QAAG,gBACd;MAAQ,IAAI,EAAC,QAAQ;MAAC,SAAS,EAAC,cAAc;MAAC,OAAO,EAAEY,aAAc;MAAA,uBAAC,QAAC,YAAY;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QAE3F;AAEzB;AAAC,GAvEuBd,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module"}